# -*- coding: utf-8 -*-
"""PES2UG20CS815_AIR_LAB2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soj_cJceQsorVmim8AHhJfhn-zD9KY97

### Importing Libraries
"""

import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

nltk.download('punkt')
nltk.download('stopwords')

"""### Loading Dataset"""

dataframe = pd.read_csv("./train.csv")

"""## **Lab - 1**

### Task - 1 (SENTENCE TOKENIZER)
"""

result = []

for para in dataframe['text']:
	result.append(nltk.sent_tokenize(str(para)))
result

"""### Task - 2 (WORD TOKENIZER)

"""

result = []

for para in dataframe["text"]:
	result.append(nltk.word_tokenize(str(para)))
result

"""### Task - 3 (REMOVAL OF STOP WORDS)

"""

corpusWithoutStopWords = []
stop_words = set(stopwords.words('english'))

def removeStopWords(para, tweetId):
	words = nltk.word_tokenize(para)
	for i in words:
		if i not in stop_words:
			corpusWithoutStopWords.append((i,tweetId))

for i in range(len(dataframe["text"])):
	removeStopWords(str(dataframe["text"][i]), (i+1))

# corpusWithoutStopWords

"""### Task - 4 (STEMMING)"""

ps = PorterStemmer()
stemmedCorpus = []

def stem(word):
	stemmedWord = nltk.word_tokenize(str(word[0]))
	return (stemmedWord, word[1])

for w in corpusWithoutStopWords:
	stemmedCorpus.append(stem(w))
stemmedCorpus

"""### **Cleaning the Stem Corpus**"""

cleanCorpus = []
for i in stemmedCorpus:
  if not (ord(i[0][0][0]) <= 64 or 91 <= ord(i[0][0][0]) <= 96):
    cleanCorpus.append(i)

"""## **Lab - 2**

### Task - 1 (INVERTED INDEX)
"""

invertedIndex = dict()

def insertIntoInvertedIndex(word):
  if word[0][0] in invertedIndex:
    invertedIndex[word[0][0]].append(word[1])
  else:
    invertedIndex[word[0][0]] = [word[1]]

for i in cleanCorpus:
    insertIntoInvertedIndex(i)
invertedIndex

"""### Task - 2 (MERGE ALGORITHM)"""

def merge(posting1,posting2):
  i, j = 0, 0
  mergedList = []
  while(i < len(posting1) and j < len(posting2)):
    if posting1[i] == posting2[j]:
      mergedList.append(posting1[i])
      i += 1
      j += 1
    elif posting1[i] < posting2[j]:
      i += 1
    else:
      j += 1
  return mergedList

query_1 = input("Enter Query 1: ")
query_2 = input("Enter Query 2: ")
result = []
try:
  result = merge(invertedIndex[query_1],invertedIndex[query_2])
except:
  pass

result